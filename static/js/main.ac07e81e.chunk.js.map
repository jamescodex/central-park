{"version":3,"sources":["components/ui/Notifications.js","hooks/useParkContract.js","hooks/useContract.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/Add.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/minter/nfts/Gift.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","components/Wallet.js","App.js","hooks/useBalance.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","useParkContract","abi","contractAddress","useContractKit","getConnectedKit","address","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","useEffect","useContract","ABI","ADDRESS","Park","Cover","name","coverImg","connect","style","backgroundImage","height","maxWidth","src","alt","borderRadius","Button","onClick","catch","e","console","log","variant","backgroundColor","cursor","href","client","ipfsHttpClient","addToken","parkContract","performActions","description","price","ipfsImage","attributes","alert","defaultAccount","data","JSON","stringify","image","owner","add","added","tokenUri","path","_price","ethers","utils","parseUnits","String","methods","addTokenToPark","send","from","uploadToIpfs","file","target","files","progress","prog","getTokens","tokens","tokensCount","call","length","i","Promise","resolve","getParkToken","_token","tokenURI","_tokenUri","fetchNftMeta","meta","id","seller","sold","token","push","Number","all","ipfsUrl","axios","get","buyToken","tokenId","buyParkToken","value","sellToken","sellParkToken","error","giftToken","receiver","message","txn","AddNfts","setName","setDescription","setPrice","setIpfsImage","setAttributes","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","as","imageUrl","Label","trait_type","attributeObject","arr","index","findIndex","el","oldArray","setAttributesFunc","Footer","disabled","truncateAddress","slice","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","current","innerHTML","appendChild","Jazzicon","parseInt","width","Gift","setReceiver","setMessage","Group","autoFocus","rows","NftCard","isOwner","Col","Card","Stack","direction","gap","Badge","bg","Text","Row","map","attribute","key","textAlign","fontFamily","Loader","Spinner","animation","role","NftList","setTokens","loading","setLoading","loadAssets","parkTokens","toast","giftParkToken","Add","xs","sm","lg","minterContract","marketplaceContract","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","Menu","Item","Divider","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.ac07e81e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import { useContract } from \"./useContract\";\nimport ABI from \"../contracts/ParkNft-data.json\";\nimport ADDRESS from \"../contracts/ParkNft-address.json\";\n\nexport const useParkContract = () =>\n  useContract(ABI.abi, ADDRESS.Park);","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{\n          backgroundImage:\n            \"linear-gradient(to bottom, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://wallpaperaccess.com/full/1826326.jpg')\",\n          height: \"100vh\",          \n        }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" style={{ borderRadius: \"50%\"}} />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue exploring.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n            style={{\n              backgroundColor: \"#093d09\",\n              cursor: \"pointer\",\n            }}\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">\n          Powered by Celo. Inspired by <a href=\"https://dacade.org\">Dacade</a>{\" \"}\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\n// function to mint NFT\nexport const addToken = async (\n  parkContract,\n  performActions,\n  { name, description, price, ipfsImage, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !price || !ipfsImage) {\n      alert(\"Fill all input fields first!\");\n    }\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n      // IPFS url for uploaded metadata\n      const tokenUri = `https://ipfs.infura.io/ipfs/${added.path}`;\n      // mint the NFT and save the IPFS url to the blockchain\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\n      let txn = await parkContract.methods\n        .addTokenToPark(_price, tokenUri)\n        .send({ from: defaultAccount });\n    } catch (error) {\n      console.log(error);\n    }\n  });\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", +error);\n  }\n};\n\n// function to get tokens from park contract\nexport const getTokens = async (parkContract) => {\n  try {\n    const tokens = [];\n    const length = await parkContract.methods.tokensCount().call();\n    for (let i = 0; i < Number(length); i++) {\n      let token = await new Promise(async (resolve) => {\n        let _token = await parkContract.methods.getParkToken(i).call();\n        console.log(_token);\n        const _tokenUri = await parkContract.methods.tokenURI(_token[0]).call();\n        const meta = await fetchNftMeta(_tokenUri);\n        resolve({\n          id: _token[0],\n          seller: _token[1],\n          owner: _token[2],\n          price: _token[3],\n          sold: _token[4],\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        });\n      });\n      tokens.push(token);\n    }\n    return Promise.all(tokens);\n  } catch (e) {\n    console.log(\"error loading tokens: \" + e);\n  }\n};\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log(\"Error uploading file: \", +e);\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log(\"Error uploading file: \", +e);\n  }\n};\n\n// function to purchase a token from park\nexport const buyToken = async (parkContract, performActions, tokenId) => {\n  try {\n    await performActions(async (kit) => {\n      try {\n        const { defaultAccount } = kit;\n        const token = await parkContract.methods.getParkToken(tokenId).call();\n        await parkContract.methods\n          .buyParkToken(tokenId)\n          .send({ from: defaultAccount, value: token.price });\n      } catch (error) {\n        console.log(\"error while buying token: \" + error);\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// function to sell token to park\nexport const sellToken = async (parkContract, performActions, tokenId) => {\n  try {\n    await performActions(async (kit) => {\n      try {\n        const { defaultAccount } = kit;\n        const txn = await parkContract.methods\n          .sellParkToken(tokenId)\n          .send({ from: defaultAccount });\n      } catch (error) {\n        console.log({ error });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// function to send token as gift to another user\nexport const giftToken = async (\n  parkContract,\n  performActions,\n  receiver,\n  tokenId,\n  message\n) => {\n  if (!receiver || !message) {\n    alert(\"fill all fields first\");\n    return;\n  }\n  try {\n    await performActions(async (kit) => {\n      try {\n        const { defaultAccount } = kit;\n        const txn = await parkContract.methods\n          .giftToken(receiver, tokenId, message)\n          .send({ from: defaultAccount });\n        console.log(txn);\n      } catch (error) {\n        console.log(\"Error gifting token: \" + error);\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst AddNfts = ({ add, address }) => {\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [price, setPrice] = useState(0);\n  const [ipfsImage, setIpfsImage] = useState();\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // confirm if all form data has been filled\n  const isFormFilled = () =>\n    name && ipfsImage && description && attributes.length === 1;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button onClick={handleShow} variant=\"dark\" className=\"rounded-pill px-2\">\n        Mint a Tree\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Mint one NFT. Save a tree in this park!</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of tree\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Amount you want to volunteer to planting this tree\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"number\"\n                placeholder=\"amount\"\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Brief description of tree\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Sample image of tree\"\n            ></Form.Control>\n\n            <Form.Label>\n              <h5>Additional infomation</h5>\n            </Form.Label>\n\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Specie tree belongs to\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"\"\n                onChange={(e) => {\n                  setAttributesFunc(e, \"specie\");\n                }}\n              />\n            </FloatingLabel>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              add({\n                name,\n                price,\n                description,\n                ipfsImage,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Mint tree\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  // props passed into this component\n  add: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nconst Gift = ({ giftToken, tokenId }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [receiver, setReceiver] = useState();\r\n  const [message, setMessage] = useState();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  return (\r\n    <>\r\n      <Button variant=\"dark\" onClick={handleShow}>\r\n        Gift Out\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Gift token to someone else</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Wallet Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"0x123...456\"\r\n                onChange={(e) => setReceiver(e.target.value)}\r\n                autoFocus\r\n              />\r\n            </Form.Group>\r\n            <Form.Group\r\n              className=\"mb-3\"\r\n              controlId=\"exampleForm.ControlTextarea1\"\r\n            >\r\n              <Form.Label>What is the reason for this gift?</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => giftToken(receiver, tokenId, message)}\r\n          >\r\n            Gift\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Gift;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\nimport Gift from \"./Gift\";\n\nconst NftCard = ({\n  isOwner,\n  data,\n  sellToken,\n  buyToken,\n  giftToken,\n  defaultAccount,\n}) => {\n  const {\n    id,\n    seller,\n    price,\n    sold,\n    name,\n    image,\n    description,\n    attributes,\n  } = data;\n\n  return (\n    <Col key={id}>\n      <Card className=\"h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={seller} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(seller)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {id} ID\n            </Badge>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {price / 10 ** 18} CELO\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div style={{ height: \"300px\" }}>\n          <img\n            src={image}\n            alt={description}\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n            <Row className=\"mt-2 mx-5 my-4\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"border rounded w-100\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n          {isOwner ? (\n            <>\n              <Button onClick={() => sellToken(id)} variant=\"success\">\n                Sell\n              </Button>\n              <Gift giftToken={giftToken} tokenId={id} />\n            </>\n          ) : !sold ? (\n            <div>\n              {defaultAccount == seller ? (\n                <div style={{ fontFamily: \"cursive\" }}>Not purchased yet</div>\n              ) : (\n                <Button onClick={() => buyToken(id)} variant=\"danger\">\n                  Buy\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div style={{ textAlign: \"center\", fontFamily: \"cursive\" }}>\n              Not available for sale yet\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n  modPrice: PropTypes.func.isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getTokens,\n  addToken,\n  buyToken,\n  sellToken,\n  giftToken,\n} from \"../../../utils/minter\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Gift from \"./Gift\"\nimport Loader from \"../../ui/Loader\";\n\nconst NftList = ({ name, parkContract }) => {\n  /* performActions : used to run smart contract interactions in order\n   *  address : fetch the address of the connected wallet\n   */\n  const { performActions, address } = useContractKit();\n  const [tokens, setTokens] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // load tokens from contract\n  const loadAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      const parkTokens = await getTokens(parkContract);\n      if (!parkTokens) return;\n      setTokens(parkTokens);\n    } catch (error) {\n      console.log(\"Error uploading file: \", + error);\n    } finally {\n      setLoading(false);\n    }\n  }, [parkContract]);\n\n  const addTokenToPark = async (data) => {\n    try {\n      setLoading(true);\n      await addToken(parkContract, performActions, data);\n      toast(<NotificationSuccess text=\"Loading NFT list....\" />);\n      loadAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // function to buy token from park\n  const buyParkToken = async (tokenId) => {\n    try {\n      setLoading(true);\n      await buyToken(parkContract, performActions, tokenId);\n      toast(<NotificationSuccess text=\"Loading NFTs....\" />);\n      loadAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to buy NFT!\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // function to re-sell park token\n  const sellParkToken = async (tokenId) => {\n    try {\n      setLoading(true);\n      await sellToken(parkContract, performActions, tokenId);\n      toast(<NotificationSuccess text=\"Loading NFTs....\" />);\n      loadAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to sell NFT!\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // send token as gift to another user\n  const giftParkToken = async (receiver, tokenId, message) => {\n    try {\n      setLoading(true);\n      await giftToken(parkContract, performActions, receiver, tokenId, message);\n      toast(<NotificationSuccess text=\"Loading NFTs....\" />);\n      loadAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to gift token!\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (address && parkContract) {\n        loadAssets();\n      }\n    } catch (error) {\n      console.log(\"Error uploading file: \", + error );\n    }\n  }, [parkContract, address, loadAssets]);\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\n              <AddNfts add={addTokenToPark} address={address} />\n            </div>\n            <Row xs={1} sm={2} lg={4} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {/* display all NFTs */}\n              {tokens.map((token) => (\n                <Nft\n                  key={token.id}                  \n                  isOwner={token.owner === address}\n                  data={{...token}}\n                  buyToken={buyParkToken}\n                  sellToken={sellParkToken}\n                  giftToken={giftParkToken}\n                  defaultAccount={address}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  marketplaceContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n  marketplaceContract: null,\n};\n\nexport default NftList;\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"dark\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport { useBalance, useParkContract } from \"./hooks\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport Wallet from \"./components/Wallet\"\nimport \"./App.css\";\n\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  // initialize contract\n  const parkContract = useParkContract();\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>              \n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>            \n            <Nfts\n              name=\"Central Park Collection\"\n              updateBalance={getBalance}              \n              parkContract={parkContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        //  if user wallet is not connected display cover page\n        <Cover\n          name=\"Hello there, you are welcome to central park collection. Explore!\"\n          coverImg=\"https://wallpaperaccess.com/full/1826326.jpg\"\n          connect={connect}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Central Park NFTs\",\n        description: \"A decentralised app for minting, trading, and gifting NFTs\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}